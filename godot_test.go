package godot

import (
	"bytes"
	"testing"
)

func TestDot(t *testing.T) {
	tests := []struct {
		name     string
		src      []byte
		wantDist []byte
		wantErr  bool
	}{
		{
			name: "simple test",
			src: []byte(`
			digraph {
				a->b
			}
			`),
			wantDist: []byte(`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.42.1 (0)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="62pt" height="116pt"
 viewBox="0.00 0.00 62.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<title>%3</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-112 58,-112 58,4 -4,4"/>
<!-- a -->
<g id="node1" class="node">
<title>a</title>
<ellipse fill="none" stroke="black" cx="27" cy="-90" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-86.3" font-family="Times,serif" font-size="14.00">a</text>
</g>
<!-- b -->
<g id="node2" class="node">
<title>b</title>
<ellipse fill="none" stroke="black" cx="27" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-14.3" font-family="Times,serif" font-size="14.00">b</text>
</g>
<!-- a&#45;&gt;b -->
<g id="edge1" class="edge">
<title>a&#45;&gt;b</title>
<path fill="none" stroke="black" d="M27,-71.7C27,-63.98 27,-54.71 27,-46.11"/>
<polygon fill="black" stroke="black" points="30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1"/>
</g>
</g>
</svg>
`),
			wantErr: false,
		},
		{
			name: "error",
			src: []byte(`
			digraph {
				a->
			}
			`),
			wantDist: []byte(""),
			wantErr:  true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotDist, err := Dot(tt.src)
			if (err != nil) != tt.wantErr {
				t.Errorf("Dot() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !bytes.Equal(gotDist, tt.wantDist) {
				t.Errorf("Dot() = %v, want %v", gotDist, tt.wantDist)
			}
		})
	}
}
